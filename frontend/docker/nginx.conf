server {
    listen 80;
    listen [::]:80;

    location ^~ /.well-known {
        allow all;
        root /data/letsencrypt/;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    # config copied from https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=nginx-1.15.6&openssl=1.1.0g&hsts=yes&profile=modern
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    ssl_certificate /etc/letsencrypt/live/cutartsis.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cutartsis.com/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # modern configuration. tweak to your needs.
    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security max-age=15768000;

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;

    root /usr/share/nginx/html;

    location / {
        rewrite ^ /index.html break;
    }

    location /static {
        expires max;
        gzip on;
        gzip_types *;
    }

    location = /robots.txt {
        # no rewrite
    }

    location = /images/content/images.json {
        add_header Access-Control-Allow-Origin *;
        alias /images/content/images.json;
    }

    location /images {
        alias /images;
        expires max;
    }

    location /images_resized {
        alias /images;
        expires max;

        if ($http_accept ~* "webp") {
            rewrite (.*)\.jpg $1.webp break;
        }
    }
}
